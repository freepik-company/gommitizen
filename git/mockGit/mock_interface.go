// Code generated by MockGen. DO NOT EDIT.
// Source: gommitizen/git (interfaces: GitI)

// Package mockGit is a generated GoMock package.
package mockGit

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGitI is a mock of GitI interface.
type MockGitI struct {
	ctrl     *gomock.Controller
	recorder *MockGitIMockRecorder
}

// MockGitIMockRecorder is the mock recorder for MockGitI.
type MockGitIMockRecorder struct {
	mock *MockGitI
}

// NewMockGitI creates a new mock instance.
func NewMockGitI(ctrl *gomock.Controller) *MockGitI {
	mock := &MockGitI{ctrl: ctrl}
	mock.recorder = &MockGitIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitI) EXPECT() *MockGitIMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockGitI) Add(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockGitIMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockGitI)(nil).Add), arg0)
}

// CleanOutput mocks base method.
func (m *MockGitI) CleanOutput() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanOutput")
}

// CleanOutput indicates an expected call of CleanOutput.
func (mr *MockGitIMockRecorder) CleanOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanOutput", reflect.TypeOf((*MockGitI)(nil).CleanOutput))
}

// Commit mocks base method.
func (m *MockGitI) Commit(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockGitIMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGitI)(nil).Commit), arg0)
}

// ConfirmChanges mocks base method.
func (m *MockGitI) ConfirmChanges(arg0 []string, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmChanges", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmChanges indicates an expected call of ConfirmChanges.
func (mr *MockGitIMockRecorder) ConfirmChanges(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmChanges", reflect.TypeOf((*MockGitI)(nil).ConfirmChanges), arg0, arg1, arg2)
}

// GetChangedFiles mocks base method.
func (m *MockGitI) GetChangedFiles() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangedFiles")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetChangedFiles indicates an expected call of GetChangedFiles.
func (mr *MockGitIMockRecorder) GetChangedFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangedFiles", reflect.TypeOf((*MockGitI)(nil).GetChangedFiles))
}

// GetCommitMessages mocks base method.
func (m *MockGitI) GetCommitMessages() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitMessages")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetCommitMessages indicates an expected call of GetCommitMessages.
func (mr *MockGitIMockRecorder) GetCommitMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitMessages", reflect.TypeOf((*MockGitI)(nil).GetCommitMessages))
}

// GetDirPath mocks base method.
func (m *MockGitI) GetDirPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDirPath indicates an expected call of GetDirPath.
func (mr *MockGitIMockRecorder) GetDirPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirPath", reflect.TypeOf((*MockGitI)(nil).GetDirPath))
}

// GetFromCommit mocks base method.
func (m *MockGitI) GetFromCommit() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromCommit")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFromCommit indicates an expected call of GetFromCommit.
func (mr *MockGitIMockRecorder) GetFromCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromCommit", reflect.TypeOf((*MockGitI)(nil).GetFromCommit))
}

// GetLastCommit mocks base method.
func (m *MockGitI) GetLastCommit() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCommit")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLastCommit indicates an expected call of GetLastCommit.
func (mr *MockGitIMockRecorder) GetLastCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCommit", reflect.TypeOf((*MockGitI)(nil).GetLastCommit))
}

// GetOutput mocks base method.
func (m *MockGitI) GetOutput() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockGitIMockRecorder) GetOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockGitI)(nil).GetOutput))
}

// Initialize mocks base method.
func (m *MockGitI) Initialize(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockGitIMockRecorder) Initialize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockGitI)(nil).Initialize), arg0)
}

// RetrieveData mocks base method.
func (m *MockGitI) RetrieveData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveData")
	ret0, _ := ret[0].(error)
	return ret0
}

// RetrieveData indicates an expected call of RetrieveData.
func (mr *MockGitIMockRecorder) RetrieveData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveData", reflect.TypeOf((*MockGitI)(nil).RetrieveData))
}

// RetrieveLastCommit mocks base method.
func (m *MockGitI) RetrieveLastCommit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveLastCommit")
	ret0, _ := ret[0].(error)
	return ret0
}

// RetrieveLastCommit indicates an expected call of RetrieveLastCommit.
func (mr *MockGitIMockRecorder) RetrieveLastCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveLastCommit", reflect.TypeOf((*MockGitI)(nil).RetrieveLastCommit))
}

// SetDirPath mocks base method.
func (m *MockGitI) SetDirPath(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDirPath", arg0)
}

// SetDirPath indicates an expected call of SetDirPath.
func (mr *MockGitIMockRecorder) SetDirPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDirPath", reflect.TypeOf((*MockGitI)(nil).SetDirPath), arg0)
}

// SetFilterFiles mocks base method.
func (m *MockGitI) SetFilterFiles(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFilterFiles", arg0)
}

// SetFilterFiles indicates an expected call of SetFilterFiles.
func (mr *MockGitIMockRecorder) SetFilterFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilterFiles", reflect.TypeOf((*MockGitI)(nil).SetFilterFiles), arg0)
}

// SetFromCommit mocks base method.
func (m *MockGitI) SetFromCommit(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFromCommit", arg0)
}

// SetFromCommit indicates an expected call of SetFromCommit.
func (mr *MockGitIMockRecorder) SetFromCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFromCommit", reflect.TypeOf((*MockGitI)(nil).SetFromCommit), arg0)
}

// Tag mocks base method.
func (m *MockGitI) Tag(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockGitIMockRecorder) Tag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockGitI)(nil).Tag), arg0)
}
